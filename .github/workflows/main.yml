name: React CI/CD AWS CDK
on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - master
      - "feature/**"
    paths:
      - "aws-cdk/static_site_stack/**"
      - "aws-cdk/artifact_stack/**"
      - "aws-cdk/app.py"
      - "aws-cdk/set_env_vars.sh"
      - "frontend/src/**"
      - ".github/**" # Uncomment to test pipeline changes

  workflow_dispatch:
    inputs:
      tag:
        description: "Version to be deployed"
        required: true
jobs:
  prod-deployment:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: prod
      RELEASE_VERSION: ${{ github.event.inputs.tag }}
      DOMAIN: ${{ secrets.AWS_DOMAIN_NAME }}
      CERT_ARN: ${{ secrets.AWS_CERT_ARN }}
    steps:
      - name: Release Version
        run: echo $RELEASE_VERSION
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.RELEASE_VERSION }}
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "14.x"
      - name: Install jq to parse outputs of cdk deploy
        run: sudo apt install jq
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install AWS CDK
        run: npm install -g aws-cdk@1.62.0
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install CDK Requirements
        run: cd cdk && pip3 install -r requirements.txt
      - name: Synthesize Cloud Formation Template
        run: cd cdk && cdk ls -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN"
      - name: Deploy Artifact Stack
        run: cd cdk && cdk deploy ArtifactStack -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN" --require-approval "never" --outputs-file cdk-deploy-output.json
      - name: Set Artifact Stack Bucket Name
        run: cd cdk && echo "::set-env name=ARTIFACT_BUCKET::$(jq .ArtifactStack.artifactbucketname cdk-deploy-output.json)"
      - name: Verify Artifact Stack Bucket Name
        run: echo $ARTIFACT_BUCKET
      - name: Deploy Static Site Stack
        run: cd cdk && cdk deploy "StaticSiteStack*" -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN" --require-approval "never" --outputs-file cdk-deploy-output.json
      - name: Set Output Variables
        run: cd cdk && bash ./set_env_vars.sh
      - name: Log Output Variables
        run: echo $BUCKET && echo $DIST_ID && echo $ARTIFACT_BUCKET
      - name: Deploy To S3 Bucket From Artifact Bucket
        run: aws s3 sync s3://$(echo $ARTIFACT_BUCKET | tr -d '"')/Release-$RELEASE_VERSION/ s3://$BUCKET --delete
      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"

  test-only:
    if: contains(github.ref, 'feature') && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "14.x"
      - name: Install Dependencies
        run: npm install
      - name: Run Front-End Tests
        uses: ./.github/actions/run_tests

  build:
    if: (github.event_name == 'pull_request' || contains(github.ref, 'tags') || contains(github.ref, 'master')) && github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set env to dev
        if: contains(github.ref, 'master') || contains(github.base_ref, 'master')
        run: echo "::set-env name=ENVIRONMENT::dev"
      - name: Set env to stg and set release version from tag
        if: contains(github.ref, 'tags')
        run: echo "::set-env name=ENVIRONMENT::stg" && echo "::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})"
      - uses: actions/setup-node@v2-beta
        with:
          node-version: "14.x"
      - name: Run Front-End Tests
        uses: ./.github/actions/run_tests
      # - name: Revert on failed test for push to master
      #   if: ${{ failure() }} && github.event_name != 'pull_request'
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git revert --no-edit HEAD
      #     git push
      # - name: Revert on failed test for pull request into master
      #   if: ${{ failure() }} && github.event_name == 'pull_request'
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git revert --no-edit -m 1 HEAD
      #     git push
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # - name: Build Project
      #   run: |
      #     cd frontend
      #     npm run build

  # build:
  #   if: (github.event_name == 'pull_request' || contains(github.ref, 'tags') || contains(github.ref, 'master')) && github.event_name != 'workflow_dispatch'
  #   env:
  #     DOMAIN: ${{ secrets.AWS_DOMAIN_NAME }}
  #     CERT_ARN: ${{ secrets.AWS_CERT_ARN }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set env to dev
  #       if: contains(github.ref, 'master') || contains(github.base_ref, 'master')
  #       run: echo "::set-env name=ENVIRONMENT::dev"
  #     - name: Set env to stg and set release version from tag
  #       if: contains(github.ref, 'tags')
  #       run: echo "::set-env name=ENVIRONMENT::stg" && echo "::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})"
  #     - uses: actions/setup-node@v2-beta
  #       with:
  #         node-version: "14.x"
  #     - name: Install Dependencies
  #       run: npm install
  #     - name: Run Front-End Tests
  #       run: npm test
  #       env:
  #         CI: true
  #     - name: Install jq to parse outputs of cdk deploy
  #       run: sudo apt install jq
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Install AWS CDK
  #       run: npm install -g aws-cdk@1.62.0
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.8"
  #     - name: Install CDK Requirements
  #       run: cd cdk && pip3 install -r requirements.txt
  #     - name: Synthesize Cloud Formation Template
  #       run: cd cdk && cdk ls -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN"
  #     - name: Deploy Artifact Stack
  #       run: cd cdk && cdk deploy ArtifactStack -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN" --require-approval "never" --outputs-file cdk-deploy-output.json
  #     - name: Set Artifact Stack Bucket Name
  #       run: cd cdk && echo "::set-env name=ARTIFACT_BUCKET::$(jq .ArtifactStack.artifactbucketname cdk-deploy-output.json)"
  #     - name: Verify Artifact Stack Name
  #       run: echo $ARTIFACT_BUCKET
  #     - name: Deploy Static Site Stack
  #       run: cd cdk && cdk deploy "StaticSiteStack*" -c environment=$ENVIRONMENT -c domain="$DOMAIN" -c certificate_arn="$CERT_ARN" --require-approval "never" --outputs-file cdk-deploy-output.json
  #     - name: Set Output Variables
  #       run: cd cdk && bash ./set_env_vars.sh
  #     - name: Log Output Variables
  #       run: echo $BUCKET && echo $DIST_ID && echo $ARTIFACT_BUCKET
  #     - name: Build Deployment Package
  #       run: npm run build
  #     - name: Deploy To S3 Bucket
  #       run: aws s3 sync ./build s3://$BUCKET --delete
  #     - name: Store Build In Artifact Bucket
  #       if: env.ENVIRONMENT == 'stg'
  #       run: aws s3 sync ./build s3://$(echo $ARTIFACT_BUCKET | tr -d '"')/Release-$RELEASE_VERSION/ --delete
  #     - name: Invalidate CloudFront Cache
  #       if: env.ENVIRONMENT == 'stg'
  #       run: aws cloudfront create-invalidation --distribution-id $DIST_ID --paths "/*"
